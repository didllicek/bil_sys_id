function [Ac,C,n,x_1,x_l0,U1_up,A1_d,failed] = first_step(H1,h1_up,id_meth_params)
    %originates from ERA algorithm for identification of linear systems  
    failed=0; 
    Ac=[];C=[];x_1=[];x_l0=[];U1_up=[];A=[];A1_d=[];n=0;    
    %svd decomposition of first Hankel matrix
    [U,S,V] = svd(H1); 
    
 
    suma=0;
    sum(S(:));    
    while ((suma/sum(S(:)))<=(1-id_meth_params.precision))
        n=n+1;
        suma=suma+S(n,n);
    end 
    
    %n=rank(H1,id_meth_params.precision)
    
    % p must be chosen that p>=n 
    %if(id_meth_params.p<n)
    %    failed=1;
    %   disp('Error!')
    %    disp('System identification method requires at least (n+1) sets of responses')
    %    disp('generated by (n+1) different time periods of pulse input!')
    %    disp('increase p!')
    %    return
    %end
    
    U1=U(1:(id_meth_params.alpha*id_meth_params.m),1:n);
    rank(U1);
    S1=S(1:n,1:n);
    V1=V(1:(id_meth_params.beta),1:n);
    
    %estimation of output matrix C
    C=U1(1:id_meth_params.m,:);
    
    %matrix x1 -  further used in second part
    S1V1T=S1*V1';
    x_1=S1V1T(:,1);
    
   %identification of matrix Ac
   U1_up=U1(1:(id_meth_params.alpha-1)*id_meth_params.m,:);
   rank(U1_up);
   U1_down=U1((id_meth_params.m+1):id_meth_params.alpha*id_meth_params.m,:);
   rank(U1_down);
   
   %system matrix of corresponding discrete--time linear system for w1
   A1_d=U1_up\U1_down;
   
   %estimation of system matrix of continuous--time system
   Ac=logm(A1_d)/id_meth_params.delta_t;
   
   
   %both computations of x_10 are possible
   x_l0=A1_d^(id_meth_params.l0)*x_1;
   x_l0=A1_d^(id_meth_params.l0)*(U1_up\h1_up);
   
end
 